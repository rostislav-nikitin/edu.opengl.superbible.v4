#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>

#include <iostream>

static GLfloat constexpr const Size{100.0f};

static GLubyte fire[128] = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x01, 0xf0,
	0x00, 0x00, 0x07, 0xf0, 0x0f, 0x00, 0x1f, 0xe0,
	0x1f, 0x80, 0x1f, 0xc0, 0x0f, 0xc0, 0x3f, 0x80,
	0x07, 0xe0, 0x7e, 0x00, 0x03, 0xf0, 0xff, 0x80,
	0x03, 0xf5, 0xff, 0xe0, 0x07, 0xfd, 0xff, 0xf8,
	0x1f, 0xfc, 0xff, 0xe8, 0xff, 0xe3, 0xbf, 0x70,
	0xde, 0x80, 0xb7, 0x00, 0x71, 0x10, 0x4a, 0x80,
	0x03, 0x10, 0x4e, 0x40, 0x02, 0x88, 0x8c, 0x20,
	0x05, 0x05, 0x04, 0x40, 0x02, 0x82, 0x14, 0x40,
	0x02, 0x40, 0x10, 0x80, 0x02, 0x64, 0x1a, 0x80,
	0x00, 0x92, 0x29, 0x00, 0x00, 0xb0, 0x48, 0x00,
	0x00, 0xc8, 0x90, 0x00, 0x00, 0x85, 0x10, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00
};

auto onResizeWindow(GLsizei width, GLsizei heigth) -> void
{
	if (heigth == 0)
		heigth = 1;

	glViewport(0, 0, width, heigth);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	GLfloat ratio = GLfloat(width) / GLfloat(heigth);

	if (width < heigth)
		glOrtho(-Size, Size, -Size / ratio, Size / ratio, -Size, Size);
	else
		glOrtho(-Size * ratio, Size * ratio, -Size, Size, -Size, Size);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

auto onRenderScene() -> void
{
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	for(int y = 0; y < 4; ++y)
	{
		glRasterPos2i(0 - 4 / 2 * 32, 0 - 4 / 2 * 32 + y * 32);
		for(int x = 0; x < 4; ++x)
		{
			glBitmap(32, 32, 0.0, 0.0, 32.0, 0.0, fire);
		}
	}

	glutSwapBuffers();
}

auto setupRc() -> void
{
	glClearColor(0.0f, 0.0f, 0.5f, 1.0f);
	glEnable(GL_DEPTH_TEST);
}

auto main(int argc, char *argv[]) -> int
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DOUBLE | GLUT_RGB);

	glutCreateWindow("Bitmap Sample");
	glutReshapeFunc(onResizeWindow);
	glutDisplayFunc(onRenderScene);

	setupRc();

	glutMainLoop();

	return EXIT_SUCCESS;
}
